<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>肖晓的博客</title>
  <subtitle>路在脚下，去向远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2016-12-12T16:49:35.456Z</updated>
  <id>/</id>
  
  <author>
    <name>肖晓</name>
    <email>395687316@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git命令整理(一)</title>
    <link href="/2016/12/12/git1/"/>
    <id>/2016/12/12/git1/</id>
    <published>2016-12-12T15:45:11.000Z</published>
    <updated>2016-12-12T16:49:35.456Z</updated>
    
    <content type="html"><![CDATA[<p>git是一个分布式的版本控制系统，其工作流程可用下图表示<br><img src="\assets\blogImg\git.png" alt=""><br><a id="more"></a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">图片来源</a></p>
<p>名称解释</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<p>一般会把需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改到本地仓库。</p>
<h1 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h1><pre><code># 在当前目录初始化一个git仓库
$ git init
# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]
# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><p>   Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<pre><code># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
</code></pre><h1 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h1><pre><code># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre><h1 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h1><pre><code># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">原文链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git是一个分布式的版本控制系统，其工作流程可用下图表示&lt;br&gt;&lt;img src=&quot;\assets\blogImg\git.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>开篇</title>
    <link href="/2016/12/11/first/"/>
    <id>/2016/12/11/first/</id>
    <published>2016-12-11T03:31:03.000Z</published>
    <updated>2016-12-12T08:17:32.940Z</updated>
    
    <content type="html"><![CDATA[<p> 作为一个程序员，在学习和工作中经常要接触各种各样的技术，接触的多了容易“健忘”，学了新的用着用着就忘了老的。就像小时候课本里的那只猴子，摘了桃子扔玉米，摘了西瓜扔桃子。估计脑子里的记忆也分类保存了。新记忆一来先清洗一遍往硬盘一丢，用的多的就把它拉到缓存区，用的少的慢慢的数据就丢失了。<br>所以搞了个博客，把这一路上遇到的技术要点记录下来，时不时的还可以回顾一下。内容都是自己以前学过用过的，还可以达到温故而知新的效果，毕竟此一时彼一时，理解能力见闻都不一样了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 作为一个程序员，在学习和工作中经常要接触各种各样的技术，接触的多了容易“健忘”，学了新的用着用着就忘了老的。就像小时候课本里的那只猴子，摘了桃子扔玉米，摘了西瓜扔桃子。估计脑子里的记忆也分类保存了。新记忆一来先清洗一遍往硬盘一丢，用的多的就把它拉到缓存区，用的少的慢慢的数
    
    </summary>
    
    
  </entry>
  
</feed>
