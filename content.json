[{"title":"学会使用正则表达式","date":"2017-01-18T12:35:29.000Z","path":"2017/01/18/regexp/","text":"正则表达式基本语法 正则表达式具有很强大的字符串处理能力，平时处理文件时可以用来搜索文本，替换文本。在编程中也可使用正则表达式处理字符串。1.针对输入内容的格式验证：邮箱，电话，时间等具有一定模式的字符串。2.字符串替换 3.动态生成页面内容 使用replace方法，过滤输入数据，将符合某种模式的数据替换成指定的数据输出。 正则表达式由普通字符和元字符组成，普通字符代表的就是本身的含义，元字符是一些预定义的特殊含义的字符。画个图来表示一下看起来更直观。 一个正则表达式可能就是普通字符也可能就是元字符，还有就是普通字符和元字符的组合,这些式子代表着符合某一种模式的字符串。 普通字符就是按照原意理解，那理解正则表达式代表的字符串就只要理解元字符的含义就行了。 普通字符普通字符包括字母数字下划线 alert(“abc”.match(/a/));//a alert(“my apple”.match(/apple/));//apple 基本字符[] 字符[]定义了一个字符集合 - 字符这个符号用在[]里面表示范围,定义了一个区间 . 字符.匹配除了回车加换行外的任一字符 \\ 字符\\ 转义符号，将特殊字符转换为普通字符 ^ 字符这个符合用在[]里面表示取反,用在外面则是表示界限 其它 量词++ 字符匹配前一个字符或子表达式的一次或多次 ?？匹配前一个字符的0次或一次重复 其它 边界字符串边界^匹配字符串的开头,以...开头的字符串 字母边界\\b匹配单词的边界，可以不成对出现 其它 分组() 捕获性分组()定义一个子表达式，代表一个整体。 (?:) 非捕获性分组在()左括号后面紧跟?:即(?:)此时不会创建自表达式 回溯引用对分组的内容在后面可以再次调用子表达式的内容可以使用\\+序数调用，序数就是定义的顺序 前后查找?=向前查找?= 匹配下一个字符前的内容 javascript只支持向前查找，java则前后查找都支持 其它 更多的元字符简单易懂的正则表达式文章1简单易懂的正则表达式文章2","tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"/tags/正则表达式/"}]},{"title":"git命令整理(一)","date":"2017-01-03T15:45:11.000Z","path":"2017/01/03/git1/","text":"git是一个分布式的版本控制系统，其工作流程可用下图表示图片来源 名称解释 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 一般会把需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改到本地仓库。 一、新建代码库# 在当前目录初始化一个git仓库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 下载一个项目和它的整个代码历史 $ git clone [url] 二、配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [--global] user.name &quot;[name]&quot; $ git config [--global] user.email &quot;[email address]&quot; 三、增加/删除文件# 添加指定文件到暂存区 $ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 $ git add [dir] # 添加当前目录的所有文件到暂存区 $ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交 $ git add -p # 删除工作区文件，并且将这次删除放入暂存区 $ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 $ git rm --cached [file] # 改名文件，并且将这个改名放入暂存区 $ git mv [file-original] [file-renamed] 四、代码提交# 提交暂存区到仓库区 $ git commit -m [message] # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 五、分支# 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] #六、标签 # 列出所有tag $ git tag # 新建一个tag在当前commit $ git tag [tag] # 新建一个tag在指定commit $ git tag [tag] [commit] # 删除本地tag $ git tag -d [tag] # 删除远程tag $ git push origin :refs/tags/[tagName] # 查看tag信息 $ git show [tag] # 提交指定tag $ git push [remote] [tag] # 提交所有tag $ git push [remote] --tags # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag] #七、查看信息 # 显示有变更的文件 $ git status # 显示当前分支的版本历史 $ git log # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat &quot;@{0 day ago}&quot; # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog #八、远程同步 # 下载远程仓库的所有变动 $ git fetch [remote] # 显示所有远程仓库 $ git remote -v # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 $ git pull [remote] [branch] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force # 推送所有分支到远程仓库 $ git push [remote] --all #九、撤销 # 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 暂时将未提交的变化移除，稍后再移入 $ git stash $ git stash pop #十、其他 # 生成一个可供发布的压缩包 $ git archive 多人协作的工作模式通常是这样： 首先，可以试图用git push origin branch-name推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！ 如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。 原文链接","tags":[{"name":"git","slug":"git","permalink":"/tags/git/"}]},{"title":"开篇","date":"2016-12-20T03:31:03.000Z","path":"2016/12/20/first/","text":"作为一个程序员，在学习和工作中经常要学习和使用各种各样的新技术，适当的记录和总结有助于学的更好也方便以后回顾。不要像小时候课本里的那只猴子，摘了桃子扔玉米，摘了西瓜扔桃子。","tags":[]}]